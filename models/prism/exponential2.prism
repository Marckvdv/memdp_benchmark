mdp

const int N = 2;
const int VARIANT; // 0 <= VARIANT <= 1

module exponential
    stage : [0 .. 1] init 0;
    a : bool init false;
    a_or_b : bool init false;
    s : [0 .. N/2] init 0;

    [a] stage=0 & !a_or_b & s=VARIANT -> (a'=true) & (a_or_b'=true);
    [a] stage=0 & !a_or_b & s=N-VARIANT -> (a'=false) & (a_or_b'=true);
    [a] stage=0 & !a_or_b & s!=VARIANT & s!=N-VARIANT -> 0.5:(a'=false) & (a_or_b'=true) + 0.5:(a'=true) & (a_or_b'=true);

    [a] stage=0 & a_or_b & s+1 < N/2 -> (s'=s+1) & (a_or_b'=false) & (a'=false);
    [a] stage=0 & a_or_b & s+1 >= N/2 -> (s'=0) & (a_or_b'=false) & (a'=false) & (stage'=1);

    [a] stage=1 -> true;
    [g0] stage=0 -> true;
    [g0] stage=1 & a_or_b -> true;
    [g1] stage=0 -> true;
    [g1] stage=1 & a_or_b -> true;

    [g0] stage=1 & !a_or_b & VARIANT=0 & s < N/2 -> (a_or_b'=true) & (a'=true);
    [g0] stage=1 & !a_or_b & VARIANT!=0 & s < N/2 -> (s'=s+1);
    [g0] stage=1 & !a_or_b & s >= N/2 -> (a_or_b'=true) & (a'=false);
    [g1] stage=1 & !a_or_b & VARIANT=1 & s < N/2 -> (a_or_b'=true) & (a'=true);
    [g1] stage=1 & !a_or_b & VARIANT!=1 & s < N/2 -> (s'=s+1);
    [g1] stage=1 & !a_or_b & s >= N/2 -> (a_or_b'=true) & (a'=false);

endmodule

label "target"= stage=1 & a_or_b & a;
